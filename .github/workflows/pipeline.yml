name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ SECRETS.TESTDB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TESTDB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TESTDB_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Ensure static directory exists
      run: mkdir -p static

    - name: Migrate DB
      run: uv run bash scripts/prestart.sh
      env:
        DATABASE_URL: ${{ secrets.DATABASE_TEST_URL }}
        ENVIRONMENT: TESTING

    - name: Run Tests
      run: uv run --frozen pytest # Tests on PRs
      env:
        DATABASE_URL: ${{ secrets.DATABASE_TEST_URL }}
        ENVIRONMENT: TESTING

  lint:
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Linter
      uses: astral-sh/ruff-action@v3
    - run: ruff check --fix
    - run: ruff format

  build:
    needs: [lint, test]  
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:

    - name: Cancel Previous Redundant Builds
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


    - name: Build and Push Docker Image
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest \
          --push .

