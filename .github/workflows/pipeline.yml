name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pasword
          POSTGRES_DB: test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Ensure static directory exists
      run: mkdir -p static

    - name: Set environment variables
      run: |
        echo 'APP_VERSION=${{ secrets.APP_VERSION }}' >> ~/app/.env
        echo 'DATABASE_URL=${{ secrets.DATABASE_URL }}' >> ~/app/.env
        echo 'FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}' >> ~/app/.env
        echo 'FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}' >> ~/app/.env
        echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> ~/app/.env

    - name: Run Tests
      run: uv run --frozen pytest 


  lint:
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Linter
      uses: astral-sh/ruff-action@v3
    - run: ruff check --fix
    - run: ruff format

  build:
    needs: [lint, test]  
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:

    - name: Cancel Previous Redundant Builds
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}


    - name: Build and Push Docker Image
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest \
          --push .

  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-20.04
  #
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - id: auth
  #     name: Authenticate to Google Cloud
  #     uses: google-github-actions/auth@v2
  #     with:
  #       credentials_json: ${{ secrets.GCP_SA_KEY }}
  #
  #   - name: Set up Cloud SDK
  #     uses: google-github-actions/setup-gcloud@v2
  #
  #   - name: Configure SSH
  #     run: |
  #       # Create SSH directory
  #       mkdir -p /home/runner/.ssh/
  #
  #       # Generate SSH key pair
  #       ssh-keygen -t rsa -f /home/runner/.ssh/google_compute_engine -N "" -C "github-actions"
  #
  #       # Read public key content and add to GCP
  #       echo "$(whoami):$(cat /home/runner/.ssh/google_compute_engine.pub)" | \
  #       gcloud compute project-info add-metadata \
  #         --metadata ssh-keys="$(cat -)"
  #
  #       # Set correct permissions
  #       chmod 600 /home/runner/.ssh/google_compute_engine
  #
  #       # Wait a moment for key propagation
  #       sleep 10
  #
  #       # Add instance hostname to known hosts (fixed zone parameter)
  #       gcloud compute ssh "${{ secrets.VM_INSTANCE}}" --zone="${{ secrets.ZONE }}" --command="echo"
  #
  #   - name: Deploy to VM
  #     run: |
  #       # Ensure the target directory exists on the VM
  #       gcloud compute ssh --zone ${{ secrets.ZONE }} ${{ secrets.VM_INSTANCE }} --command="mkdir -p ~/app"
  #
  #       # Copy files to the VM
  #       gcloud compute scp --recurse --zone ${{ secrets.ZONE }} ./* ${{ secrets.VM_INSTANCE }}:~/app/
  #
  #       # Create the .env file dynamically on the VM
  #       gcloud compute ssh --zone ${{ secrets.ZONE }} ${{ secrets.VM_INSTANCE }} --command="
  #         echo 'APP_VERSION=${{ secrets.APP_VERSION }}' >> ~/app/.env && \
  #         echo 'ENVIRONMENT=${{ secrets.ENVIRONMENT }}' >> ~/app/.env && \
  #         echo 'DATABASE_URL=${{ secrets.DATABASE_URL }}' >> ~/app/.env && \
  #         echo 'FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}' >> ~/app/.env && \
  #         echo 'FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}' >> ~/app/.env && \
  #         echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> ~/app/.env
  #       "
  #
  #       # Execute deployment commands on the VM
  #       gcloud compute ssh --zone ${{ secrets.ZONE }} ${{ secrets.VM_INSTANCE }} --command="
  #         cd ~/app && \
  #         export DOCKER_BUILDKIT=1 && \
  #         sudo docker-compose -f docker-compose.prod.yml down && \
  #         sudo docker-compose -f docker-compose.prod.yml up -d
  #       "
